name: Open With Browser Build & Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (semver) to build (optional override for prerelease)'
        required: false
      prerelease:
        description: 'Mark GitHub Release as pre-release'
        type: boolean
        required: false
        default: false

jobs:
  build:
    name: Build (${{ matrix.platform }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            target: ''
          - os: windows-latest
            platform: windows
            target: ''
          - os: macos-latest
            platform: macos
            target: ''
    env:
      TAURI_SKIP_UPDATE_CHECK: 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install Rust toolchain
        shell: bash
        run: |
          rustup toolchain install stable --profile minimal
          rustup component add --toolchain stable rustfmt clippy
          rustup default stable

      - name: Cache Rust
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            apps/desktop/src-tauri/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('apps/desktop/src-tauri/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Install Linux system deps (Tauri)
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libglib2.0-dev \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            librsvg2-dev \
            patchelf \
            libasound2-dev \
            libx11-dev \
            libxdo-dev \
            pkg-config \
            libssl-dev \
            libayatana-appindicator3-dev
          pkg-config --libs --cflags glib-2.0 || true

      - name: Install frontend dependencies
        working-directory: apps/desktop
        run: bun install --frozen-lockfile

      - name: Build Tauri App
        working-directory: apps/desktop
        run: bun run tauri build

      - name: Collect Artifacts (Linux)
        if: matrix.platform == 'linux'
        run: |
          mkdir -p artifacts
          ls -R src-tauri/target/release/bundle
          cp -v src-tauri/target/release/bundle/appimage/*.AppImage artifacts/ 2>/dev/null || echo 'no appimage'
          cp -v src-tauri/target/release/bundle/deb/*.deb artifacts/ 2>/dev/null || echo 'no deb'
          cp -v src-tauri/target/release/bundle/rpm/*.rpm artifacts/ 2>/dev/null || echo 'no rpm'
          cp -v src-tauri/target/release/bundle/msi/*.msi artifacts/ 2>/dev/null || echo 'no msi (expected)'
        working-directory: apps/desktop

      - name: Collect Artifacts (Windows)
        if: matrix.platform == 'windows'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path artifacts | Out-Null
          Get-ChildItem src-tauri/target/release/bundle -Recurse
          Copy-Item src-tauri/target/release/bundle/msi/*.msi artifacts -ErrorAction SilentlyContinue
          Copy-Item src-tauri/target/release/bundle/nsis/*.* artifacts -ErrorAction SilentlyContinue
        working-directory: apps/desktop

      - name: Collect Artifacts (macOS)
        if: matrix.platform == 'macos'
        run: |
          mkdir -p artifacts
          ls -R src-tauri/target/release/bundle
          cp -v src-tauri/target/release/bundle/dmg/*.dmg artifacts/ 2>/dev/null || echo 'no dmg yet'
          cp -v src-tauri/target/release/bundle/macos/*.app.tar.gz artifacts/ 2>/dev/null || echo 'no app tar'
        working-directory: apps/desktop

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: open-with-browser-${{ matrix.platform }}
          path: apps/desktop/artifacts
          if-no-files-found: warn

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Determine version
        id: ver
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            ref="${GITHUB_REF##*/}"
            echo "version=${ref}" >> $GITHUB_OUTPUT
          fi

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist-artifacts

      - name: Set release metadata
        id: release_meta
        env:
          VERSION: ${{ steps.ver.outputs.version }}
          PRERELEASE_INPUT: ${{ inputs.prerelease || 'false' }}
        run: |
          version="$VERSION"
          prerelease_input="$PRERELEASE_INPUT"
          is_prerelease=false
          if [ "$prerelease_input" = "true" ]; then
            is_prerelease=true
          elif [[ "$version" == *"-rc"* ]]; then
            is_prerelease=true
          fi
          echo "prerelease=$is_prerelease" >> "$GITHUB_OUTPUT"

      - name: Publish release
        id: publish_release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');

            const version = process.env.RELEASE_VERSION;
            if (!version) {
              core.setFailed('RELEASE_VERSION not provided');
              return;
            }

            const artifactsDir = process.env.ARTIFACTS_DIR;
            if (!artifactsDir || !fs.existsSync(artifactsDir)) {
              core.warning(`Artifacts directory "${artifactsDir}" not found, skipping asset upload.`);
              return;
            }

            const walk = (dir) => {
              const entries = fs.readdirSync(dir, { withFileTypes: true });
              return entries.flatMap((entry) => {
                const fullPath = path.join(dir, entry.name);
                if (entry.isDirectory()) {
                  return walk(fullPath);
                }
                if (entry.isFile()) {
                  return [fullPath];
                }
                return [];
              });
            };

            const files = walk(artifactsDir);
            if (files.length === 0) {
              core.warning(`No files found under "${artifactsDir}" to upload.`);
              return;
            }

            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const tagName = version;
            const releaseName = `Open With Browser ${version}`;
            const prerelease = process.env.PRERELEASE_FLAG === 'true';

            let release;
            try {
              const existing = await github.rest.repos.getReleaseByTag({ owner, repo, tag: tagName });
              release = existing.data;
              core.info(`Found existing release for ${tagName}, reusing it.`);
            } catch (error) {
              if (error.status === 404) {
                core.info(`Creating new release for ${tagName}.`);
                const created = await github.rest.repos.createRelease({
                  owner,
                  repo,
                  tag_name: tagName,
                  name: releaseName,
                  draft: false,
                  prerelease,
                  generate_release_notes: true,
                });
                release = created.data;
              } else {
                throw error;
              }
            }

            if (release.assets && release.assets.length > 0) {
              core.info(`Removing ${release.assets.length} existing asset(s).`);
              for (const asset of release.assets) {
                await github.rest.repos.deleteReleaseAsset({
                  owner,
                  repo,
                  asset_id: asset.id,
                });
              }
            }

            for (const file of files) {
              const stats = fs.statSync(file);
              if (!stats.isFile()) {
                continue;
              }
              const relativePath = path.relative(artifactsDir, file).replace(/\\/g, '/');
              const assetName = relativePath.replace(/\//g, '-');
              core.info(`Uploading ${assetName}`);
              await github.rest.repos.uploadReleaseAsset({
                owner,
                repo,
                release_id: release.id,
                name: assetName,
                headers: {
                  'content-type': 'application/octet-stream',
                  'content-length': stats.size,
                },
                data: fs.readFileSync(file),
              });
            }

            core.setOutput('release_url', release.html_url);
        env:
          RELEASE_VERSION: ${{ steps.ver.outputs.version }}
          PRERELEASE_FLAG: ${{ steps.release_meta.outputs.prerelease }}
          ARTIFACTS_DIR: dist-artifacts
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
